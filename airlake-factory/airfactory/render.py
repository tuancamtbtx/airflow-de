"""
Render the config into the read to run dag
"""
import os
from typing import Dict, Any
from datetime import datetime

import jinja2

from airlake.utils.logger import LoggerMixing

DAG_TEMPLATE = jinja2.Template(
    """
'''
Generated by Airflow Datalake! Do not edit!
Timestamp {{ timestamp }}
'''

from airflow import DAG

from airlake.factory.render import load_dag

conf = {{ json_conf }}
name = '{{ name }}'
load_dag(globals(), name, conf)"""
)



def load_dag(g: Dict[str, Any], name: str, conf: Dict[str, Any]):
    """Given name of dag, render it into airflow dags"""
    # conf = CommonCompiler.compile_instance(conf)
    # dag_id, dag = DagBuilder(name, conf).build()
    # g[dag_id] = dag
    return conf

def dump_to_py(name: str, conf: Dict[str, Any]):
    """Dumps configs from dict into python dag file"""
    return DAG_TEMPLATE.render(
        name=name,
        json_conf=conf,
        timestamp=datetime.now().astimezone().isoformat(),
    )

class RenderToDagFile(LoggerMixing):
    def __init__(self) -> None:
        pass

    def render(self, name: str, conf: Dict[str, Any]):
        return dump_to_py(name, conf)
    

class RenderToDagFile(LoggerMixing):
    def __init__(self, dag_repo: DagConfigFactoryRepo, dag_config: YamlConfig):
        self.dag_repo = dag_repo
        self.dag_config = dag_config

    def render(self, dag_conf: AirDagConfig, location: str):
        try:
            self.logger.debug("Loading dag %s", dag_conf.name)
            conf_payload = dag_conf.get_payload()
            for conf in self.dag_config.compile(conf_payload, dag_conf.dag_options):
                name = conf.pop(FIELD_DAGS_NAME)
                dest = os.path.join(location, "{}.py".format(name))
                dag = dump_to_py(name, conf)
                with open(dest, "w") as fwriter:
                    fwriter.write(dag)

            self.logger.debug("[%s] Rendering Done!", dag_conf.name)
            return True
        except Exception as e:
            self.logger.error("RenderDAG %s Error: %s", dag_conf.name, e)
            return False